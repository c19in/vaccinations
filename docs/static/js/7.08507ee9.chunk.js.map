{"version":3,"sources":["../node_modules/d3-interpolate-path/build/d3-interpolate-path.mjs","../node_modules/d3-array/src/max.js","components/Minigraphs.js","../node_modules/fast-deep-equal/index.js"],"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_defineProperty","obj","key","value","defineProperty","configurable","writable","_extends","assign","target","i","arguments","length","source","prototype","hasOwnProperty","call","this","_arrayLikeToArray","arr","len","arr2","Array","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","isArray","minLen","n","toString","slice","constructor","name","from","test","_unsupportedIterableToArray","F","s","done","e","f","TypeError","err","normalCompletion","didErr","step","next","return","decasteljau","points","t","left","right","decasteljauRecurse","newPoints","reverse","pointsToCommand","command","x2","y2","x1","y1","x","y","type","splitCurve","commandStart","commandEnd","segmentCount","segments","remainingCurve","tIncrement","split","splitCurveAsPoints","map","commandTokenRegex","typeMap","M","L","H","V","C","S","Q","T","A","Z","arrayOfLength","array","commandToString","concat","p","join","extend","commandsToExtend","referenceCommands","excludeSegment","numSegmentsToExtend","numReferenceSegments","segmentRatio","extended","reduce","accum","d","insertIndex","Math","floor","addToPriorSegment","lastCommandCopies","forEach","copyCommand","splitSegment","unshift","pathCommandsFromString","commandArgs","tokens","match","commands","a","interpolatePathCommands","aCommandsInput","bCommandsInput","aCommands","bCommands","addZ","pop","abs","interpolatedCommands","aCommand","bCommand","conversionMap","readFromBKeys","toUpperCase","aConverted","bKey","bValue","aValue","undefined","includes","convertToSameType","getOwnPropertyDescriptors","defineProperties","_objectSpread2","_step","interpolatedCommand","_iterator","arg","round","interpolatePath","b","commandInterpolator","_step2","interpolatedString","_iterator2","toLowerCase","max","values","valueof","index","margin","Minigraphs","timeseries","timelineDate","date","refs","useRef","endDate","getIndiaDateYesterdayISO","useMeasure","wrapperRef","width","min","dates","useMemo","pastDates","lastDate","cutOffDateLower","formatISO","subDays","parseIndiaDate","MINIGRAPH_LOOKBACK_DAYS","representation","getMinigraphStatistic","useCallback","statistic","getStatistic","useEffect","chartRight","chartBottom","xScale","scaleTime","clamp","domain","range","current","ref","pathLength","svg","select","LEVEL_STATISTICS","color","STATISTIC_CONFIGS","dailyMaxAbs","yScale","scaleLinear","linePath","line","curve","curveMonotoneX","selectAll","data","enter","append","attr","getTotalLength","transition","delay","duration","update","attrTween","previous","selection","style","className","classnames","el","preserveAspectRatio","height","isEqual","prevProps","currProps","forceRender","equal","stateCode","memo","module","exports","RegExp","flags","valueOf"],"mappings":"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","file":"static/js/7.08507ee9.chunk.js","sourcesContent":["function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\n/**\n * de Casteljau's algorithm for drawing and splitting bezier curves.\n * Inspired by https://pomax.github.io/bezierinfo/\n *\n * @param {Number[][]} points Array of [x,y] points: [start, control1, control2, ..., end]\n *   The original segment to split.\n * @param {Number} t Where to split the curve (value between [0, 1])\n * @return {Object} An object { left, right } where left is the segment from 0..t and\n *   right is the segment from t..1.\n */\nfunction decasteljau(points, t) {\n  var left = [];\n  var right = [];\n\n  function decasteljauRecurse(points, t) {\n    if (points.length === 1) {\n      left.push(points[0]);\n      right.push(points[0]);\n    } else {\n      var newPoints = Array(points.length - 1);\n\n      for (var i = 0; i < newPoints.length; i++) {\n        if (i === 0) {\n          left.push(points[0]);\n        }\n\n        if (i === newPoints.length - 1) {\n          right.push(points[i + 1]);\n        }\n\n        newPoints[i] = [(1 - t) * points[i][0] + t * points[i + 1][0], (1 - t) * points[i][1] + t * points[i + 1][1]];\n      }\n\n      decasteljauRecurse(newPoints, t);\n    }\n  }\n\n  if (points.length) {\n    decasteljauRecurse(points, t);\n  }\n\n  return {\n    left: left,\n    right: right.reverse()\n  };\n}\n/**\n * Convert segments represented as points back into a command object\n *\n * @param {Number[][]} points Array of [x,y] points: [start, control1, control2, ..., end]\n *   Represents a segment\n * @return {Object} A command object representing the segment.\n */\n\n\nfunction pointsToCommand(points) {\n  var command = {};\n\n  if (points.length === 4) {\n    command.x2 = points[2][0];\n    command.y2 = points[2][1];\n  }\n\n  if (points.length >= 3) {\n    command.x1 = points[1][0];\n    command.y1 = points[1][1];\n  }\n\n  command.x = points[points.length - 1][0];\n  command.y = points[points.length - 1][1];\n\n  if (points.length === 4) {\n    // start, control1, control2, end\n    command.type = 'C';\n  } else if (points.length === 3) {\n    // start, control, end\n    command.type = 'Q';\n  } else {\n    // start, end\n    command.type = 'L';\n  }\n\n  return command;\n}\n/**\n * Runs de Casteljau's algorithm enough times to produce the desired number of segments.\n *\n * @param {Number[][]} points Array of [x,y] points for de Casteljau (the initial segment to split)\n * @param {Number} segmentCount Number of segments to split the original into\n * @return {Number[][][]} Array of segments\n */\n\n\nfunction splitCurveAsPoints(points, segmentCount) {\n  segmentCount = segmentCount || 2;\n  var segments = [];\n  var remainingCurve = points;\n  var tIncrement = 1 / segmentCount; // x-----x-----x-----x\n  // t=  0.33   0.66   1\n  // x-----o-----------x\n  // r=  0.33\n  //       x-----o-----x\n  // r=         0.5  (0.33 / (1 - 0.33))  === tIncrement / (1 - (tIncrement * (i - 1))\n  // x-----x-----x-----x----x\n  // t=  0.25   0.5   0.75  1\n  // x-----o----------------x\n  // r=  0.25\n  //       x-----o----------x\n  // r=         0.33  (0.25 / (1 - 0.25))\n  //             x-----o----x\n  // r=         0.5  (0.25 / (1 - 0.5))\n\n  for (var i = 0; i < segmentCount - 1; i++) {\n    var tRelative = tIncrement / (1 - tIncrement * i);\n    var split = decasteljau(remainingCurve, tRelative);\n    segments.push(split.left);\n    remainingCurve = split.right;\n  } // last segment is just to the end from the last point\n\n\n  segments.push(remainingCurve);\n  return segments;\n}\n/**\n * Convert command objects to arrays of points, run de Casteljau's algorithm on it\n * to split into to the desired number of segments.\n *\n * @param {Object} commandStart The start command object\n * @param {Object} commandEnd The end command object\n * @param {Number} segmentCount The number of segments to create\n * @return {Object[]} An array of commands representing the segments in sequence\n */\n\n\nfunction splitCurve(commandStart, commandEnd, segmentCount) {\n  var points = [[commandStart.x, commandStart.y]];\n\n  if (commandEnd.x1 != null) {\n    points.push([commandEnd.x1, commandEnd.y1]);\n  }\n\n  if (commandEnd.x2 != null) {\n    points.push([commandEnd.x2, commandEnd.y2]);\n  }\n\n  points.push([commandEnd.x, commandEnd.y]);\n  return splitCurveAsPoints(points, segmentCount).map(pointsToCommand);\n}\n\nvar commandTokenRegex = /[MLCSTQAHVZmlcstqahv]|-?[\\d.e+-]+/g;\n/**\n * List of params for each command type in a path `d` attribute\n */\n\nvar typeMap = {\n  M: ['x', 'y'],\n  L: ['x', 'y'],\n  H: ['x'],\n  V: ['y'],\n  C: ['x1', 'y1', 'x2', 'y2', 'x', 'y'],\n  S: ['x2', 'y2', 'x', 'y'],\n  Q: ['x1', 'y1', 'x', 'y'],\n  T: ['x', 'y'],\n  A: ['rx', 'ry', 'xAxisRotation', 'largeArcFlag', 'sweepFlag', 'x', 'y'],\n  Z: []\n}; // Add lower case entries too matching uppercase (e.g. 'm' == 'M')\n\nObject.keys(typeMap).forEach(function (key) {\n  typeMap[key.toLowerCase()] = typeMap[key];\n});\n\nfunction arrayOfLength(length, value) {\n  var array = Array(length);\n\n  for (var i = 0; i < length; i++) {\n    array[i] = value;\n  }\n\n  return array;\n}\n/**\n * Converts a command object to a string to be used in a `d` attribute\n * @param {Object} command A command object\n * @return {String} The string for the `d` attribute\n */\n\n\nfunction commandToString(command) {\n  return \"\".concat(command.type).concat(typeMap[command.type].map(function (p) {\n    return command[p];\n  }).join(','));\n}\n/**\n * Converts command A to have the same type as command B.\n *\n * e.g., L0,5 -> C0,5,0,5,0,5\n *\n * Uses these rules:\n * x1 <- x\n * x2 <- x\n * y1 <- y\n * y2 <- y\n * rx <- 0\n * ry <- 0\n * xAxisRotation <- read from B\n * largeArcFlag <- read from B\n * sweepflag <- read from B\n *\n * @param {Object} aCommand Command object from path `d` attribute\n * @param {Object} bCommand Command object from path `d` attribute to match against\n * @return {Object} aCommand converted to type of bCommand\n */\n\n\nfunction convertToSameType(aCommand, bCommand) {\n  var conversionMap = {\n    x1: 'x',\n    y1: 'y',\n    x2: 'x',\n    y2: 'y'\n  };\n  var readFromBKeys = ['xAxisRotation', 'largeArcFlag', 'sweepFlag']; // convert (but ignore M types)\n\n  if (aCommand.type !== bCommand.type && bCommand.type.toUpperCase() !== 'M') {\n    var aConverted = {};\n    Object.keys(bCommand).forEach(function (bKey) {\n      var bValue = bCommand[bKey]; // first read from the A command\n\n      var aValue = aCommand[bKey]; // if it is one of these values, read from B no matter what\n\n      if (aValue === undefined) {\n        if (readFromBKeys.includes(bKey)) {\n          aValue = bValue;\n        } else {\n          // if it wasn't in the A command, see if an equivalent was\n          if (aValue === undefined && conversionMap[bKey]) {\n            aValue = aCommand[conversionMap[bKey]];\n          } // if it doesn't have a converted value, use 0\n\n\n          if (aValue === undefined) {\n            aValue = 0;\n          }\n        }\n      }\n\n      aConverted[bKey] = aValue;\n    }); // update the type to match B\n\n    aConverted.type = bCommand.type;\n    aCommand = aConverted;\n  }\n\n  return aCommand;\n}\n/**\n * Interpolate between command objects commandStart and commandEnd segmentCount times.\n * If the types are L, Q, or C then the curves are split as per de Casteljau's algorithm.\n * Otherwise we just copy commandStart segmentCount - 1 times, finally ending with commandEnd.\n *\n * @param {Object} commandStart Command object at the beginning of the segment\n * @param {Object} commandEnd Command object at the end of the segment\n * @param {Number} segmentCount The number of segments to split this into. If only 1\n *   Then [commandEnd] is returned.\n * @return {Object[]} Array of ~segmentCount command objects between commandStart and\n *   commandEnd. (Can be segmentCount+1 objects if commandStart is type M).\n */\n\n\nfunction splitSegment(commandStart, commandEnd, segmentCount) {\n  var segments = []; // line, quadratic bezier, or cubic bezier\n\n  if (commandEnd.type === 'L' || commandEnd.type === 'Q' || commandEnd.type === 'C') {\n    segments = segments.concat(splitCurve(commandStart, commandEnd, segmentCount)); // general case - just copy the same point\n  } else {\n    var copyCommand = _extends({}, commandStart); // convert M to L\n\n\n    if (copyCommand.type === 'M') {\n      copyCommand.type = 'L';\n    }\n\n    segments = segments.concat(arrayOfLength(segmentCount - 1).map(function () {\n      return copyCommand;\n    }));\n    segments.push(commandEnd);\n  }\n\n  return segments;\n}\n/**\n * Extends an array of commandsToExtend to the length of the referenceCommands by\n * splitting segments until the number of commands match. Ensures all the actual\n * points of commandsToExtend are in the extended array.\n *\n * @param {Object[]} commandsToExtend The command object array to extend\n * @param {Object[]} referenceCommands The command object array to match in length\n * @param {Function} excludeSegment a function that takes a start command object and\n *   end command object and returns true if the segment should be excluded from splitting.\n * @return {Object[]} The extended commandsToExtend array\n */\n\n\nfunction extend(commandsToExtend, referenceCommands, excludeSegment) {\n  // compute insertion points:\n  // number of segments in the path to extend\n  var numSegmentsToExtend = commandsToExtend.length - 1; // number of segments in the reference path.\n\n  var numReferenceSegments = referenceCommands.length - 1; // this value is always between [0, 1].\n\n  var segmentRatio = numSegmentsToExtend / numReferenceSegments; // create a map, mapping segments in referenceCommands to how many points\n  // should be added in that segment (should always be >= 1 since we need each\n  // point itself).\n  // 0 = segment 0-1, 1 = segment 1-2, n-1 = last vertex\n\n  var countPointsPerSegment = arrayOfLength(numReferenceSegments).reduce(function (accum, d, i) {\n    var insertIndex = Math.floor(segmentRatio * i); // handle excluding segments\n\n    if (excludeSegment && insertIndex < commandsToExtend.length - 1 && excludeSegment(commandsToExtend[insertIndex], commandsToExtend[insertIndex + 1])) {\n      // set the insertIndex to the segment that this point should be added to:\n      // round the insertIndex essentially so we split half and half on\n      // neighbouring segments. hence the segmentRatio * i < 0.5\n      var addToPriorSegment = segmentRatio * i % 1 < 0.5; // only skip segment if we already have 1 point in it (can't entirely remove a segment)\n\n      if (accum[insertIndex]) {\n        // TODO - Note this is a naive algorithm that should work for most d3-area use cases\n        // but if two adjacent segments are supposed to be skipped, this will not perform as\n        // expected. Could be updated to search for nearest segment to place the point in, but\n        // will only do that if necessary.\n        // add to the prior segment\n        if (addToPriorSegment) {\n          if (insertIndex > 0) {\n            insertIndex -= 1; // not possible to add to previous so adding to next\n          } else if (insertIndex < commandsToExtend.length - 1) {\n            insertIndex += 1;\n          } // add to next segment\n\n        } else if (insertIndex < commandsToExtend.length - 1) {\n          insertIndex += 1; // not possible to add to next so adding to previous\n        } else if (insertIndex > 0) {\n          insertIndex -= 1;\n        }\n      }\n    }\n\n    accum[insertIndex] = (accum[insertIndex] || 0) + 1;\n    return accum;\n  }, []); // extend each segment to have the correct number of points for a smooth interpolation\n\n  var extended = countPointsPerSegment.reduce(function (extended, segmentCount, i) {\n    // if last command, just add `segmentCount` number of times\n    if (i === commandsToExtend.length - 1) {\n      var lastCommandCopies = arrayOfLength(segmentCount, _extends({}, commandsToExtend[commandsToExtend.length - 1])); // convert M to L\n\n      if (lastCommandCopies[0].type === 'M') {\n        lastCommandCopies.forEach(function (d) {\n          d.type = 'L';\n        });\n      }\n\n      return extended.concat(lastCommandCopies);\n    } // otherwise, split the segment segmentCount times.\n\n\n    return extended.concat(splitSegment(commandsToExtend[i], commandsToExtend[i + 1], segmentCount));\n  }, []); // add in the very first point since splitSegment only adds in the ones after it\n\n  extended.unshift(commandsToExtend[0]);\n  return extended;\n}\n/**\n * Takes a path `d` string and converts it into an array of command\n * objects. Drops the `Z` character.\n *\n * @param {String|null} d A path `d` string\n */\n\n\nfunction pathCommandsFromString(d) {\n  // split into valid tokens\n  var tokens = (d || '').match(commandTokenRegex) || [];\n  var commands = [];\n  var commandArgs;\n  var command; // iterate over each token, checking if we are at a new command\n  // by presence in the typeMap\n\n  for (var i = 0; i < tokens.length; ++i) {\n    commandArgs = typeMap[tokens[i]]; // new command found:\n\n    if (commandArgs) {\n      command = {\n        type: tokens[i]\n      }; // add each of the expected args for this command:\n\n      for (var a = 0; a < commandArgs.length; ++a) {\n        command[commandArgs[a]] = +tokens[i + a + 1];\n      } // need to increment our token index appropriately since\n      // we consumed token args\n\n\n      i += commandArgs.length;\n      commands.push(command);\n    }\n  }\n\n  return commands;\n}\n/**\n * Interpolate from A to B by extending A and B during interpolation to have\n * the same number of points. This allows for a smooth transition when they\n * have a different number of points.\n *\n * Ignores the `Z` command in paths unless both A and B end with it.\n *\n * This function works directly with arrays of command objects instead of with\n * path `d` strings (see interpolatePath for working with `d` strings).\n *\n * @param {Object[]} aCommandsInput Array of path commands\n * @param {Object[]} bCommandsInput Array of path commands\n * @param {Function} excludeSegment a function that takes a start command object and\n *   end command object and returns true if the segment should be excluded from splitting.\n * @returns {Function} Interpolation function that maps t ([0, 1]) to an array of path commands.\n */\n\nfunction interpolatePathCommands(aCommandsInput, bCommandsInput, excludeSegment) {\n  // make a copy so we don't mess with the input arrays\n  var aCommands = aCommandsInput == null ? [] : aCommandsInput.slice();\n  var bCommands = bCommandsInput == null ? [] : bCommandsInput.slice(); // both input sets are empty, so we don't interpolate\n\n  if (!aCommands.length && !bCommands.length) {\n    return function nullInterpolator() {\n      return [];\n    };\n  } // do we add Z during interpolation? yes if both have it. (we'd expect both to have it or not)\n\n\n  var addZ = (aCommands.length === 0 || aCommands[aCommands.length - 1].type === 'Z') && (bCommands.length === 0 || bCommands[bCommands.length - 1].type === 'Z'); // we temporarily remove Z\n\n  if (aCommands.length > 0 && aCommands[aCommands.length - 1].type === 'Z') {\n    aCommands.pop();\n  }\n\n  if (bCommands.length > 0 && bCommands[bCommands.length - 1].type === 'Z') {\n    bCommands.pop();\n  } // if A is empty, treat it as if it used to contain just the first point\n  // of B. This makes it so the line extends out of from that first point.\n\n\n  if (!aCommands.length) {\n    aCommands.push(bCommands[0]); // otherwise if B is empty, treat it as if it contains the first point\n    // of A. This makes it so the line retracts into the first point.\n  } else if (!bCommands.length) {\n    bCommands.push(aCommands[0]);\n  } // extend to match equal size\n\n\n  var numPointsToExtend = Math.abs(bCommands.length - aCommands.length);\n\n  if (numPointsToExtend !== 0) {\n    // B has more points than A, so add points to A before interpolating\n    if (bCommands.length > aCommands.length) {\n      aCommands = extend(aCommands, bCommands, excludeSegment); // else if A has more points than B, add more points to B\n    } else if (bCommands.length < aCommands.length) {\n      bCommands = extend(bCommands, aCommands, excludeSegment);\n    }\n  } // commands have same length now.\n  // convert commands in A to the same type as those in B\n\n\n  aCommands = aCommands.map(function (aCommand, i) {\n    return convertToSameType(aCommand, bCommands[i]);\n  }); // create mutable interpolated command objects\n\n  var interpolatedCommands = aCommands.map(function (aCommand) {\n    return _objectSpread2({}, aCommand);\n  });\n\n  if (addZ) {\n    interpolatedCommands.push({\n      type: 'Z'\n    });\n    aCommands.push({\n      type: 'Z'\n    }); // required for when returning at t == 0\n  }\n\n  return function pathCommandInterpolator(t) {\n    // at 1 return the final value without the extensions used during interpolation\n    if (t === 1) {\n      return bCommandsInput == null ? [] : bCommandsInput;\n    } // work with aCommands directly since interpolatedCommands are mutated\n\n\n    if (t === 0) {\n      return aCommands;\n    } // interpolate the commands using the mutable interpolated command objs\n\n\n    for (var i = 0; i < interpolatedCommands.length; ++i) {\n      // if (interpolatedCommands[i].type === 'Z') continue;\n      var aCommand = aCommands[i];\n      var bCommand = bCommands[i];\n      var interpolatedCommand = interpolatedCommands[i];\n\n      var _iterator = _createForOfIteratorHelper(typeMap[interpolatedCommand.type]),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var arg = _step.value;\n          interpolatedCommand[arg] = (1 - t) * aCommand[arg] + t * bCommand[arg]; // do not use floats for flags (#27), round to integer\n\n          if (arg === 'largeArcFlag' || arg === 'sweepFlag') {\n            interpolatedCommand[arg] = Math.round(interpolatedCommand[arg]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return interpolatedCommands;\n  };\n}\n/**\n * Interpolate from A to B by extending A and B during interpolation to have\n * the same number of points. This allows for a smooth transition when they\n * have a different number of points.\n *\n * Ignores the `Z` character in paths unless both A and B end with it.\n *\n * @param {String} a The `d` attribute for a path\n * @param {String} b The `d` attribute for a path\n * @param {Function} excludeSegment a function that takes a start command object and\n *   end command object and returns true if the segment should be excluded from splitting.\n * @returns {Function} Interpolation function that maps t ([0, 1]) to a path `d` string.\n */\n\nfunction interpolatePath(a, b, excludeSegment) {\n  var aCommands = pathCommandsFromString(a);\n  var bCommands = pathCommandsFromString(b);\n\n  if (!aCommands.length && !bCommands.length) {\n    return function nullInterpolator() {\n      return '';\n    };\n  }\n\n  var commandInterpolator = interpolatePathCommands(aCommands, bCommands, excludeSegment);\n  return function pathStringInterpolator(t) {\n    // at 1 return the final value without the extensions used during interpolation\n    if (t === 1) {\n      return b == null ? '' : b;\n    }\n\n    var interpolatedCommands = commandInterpolator(t); // convert to a string (fastest concat: https://jsperf.com/join-concat/150)\n\n    var interpolatedString = '';\n\n    var _iterator2 = _createForOfIteratorHelper(interpolatedCommands),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var interpolatedCommand = _step2.value;\n        interpolatedString += commandToString(interpolatedCommand);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return interpolatedString;\n  };\n}\n\nexport { interpolatePath, interpolatePathCommands, pathCommandsFromString };\n","export default function max(values, valueof) {\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null\n          && (max < value || (max === undefined && value >= value))) {\n        max = value;\n      }\n    }\n  }\n  return max;\n}\n","import {\n  MINIGRAPH_LOOKBACK_DAYS,\n  LEVEL_STATISTICS,\n  STATISTIC_CONFIGS,\n} from '../constants';\nimport {\n  getStatistic,\n  getIndiaDateYesterdayISO,\n  parseIndiaDate,\n} from '../utils/commonFunctions';\n\nimport classnames from 'classnames';\nimport {max} from 'd3-array';\nimport {interpolatePath} from 'd3-interpolate-path';\nimport {scaleTime, scaleLinear} from 'd3-scale';\nimport {select} from 'd3-selection';\nimport {line, curveMonotoneX} from 'd3-shape';\nimport 'd3-transition';\nimport {formatISO, subDays} from 'date-fns';\nimport equal from 'fast-deep-equal';\nimport {memo, useCallback, useEffect, useRef, useMemo} from 'react';\nimport {useMeasure} from 'react-use';\n\n// Dimensions\nconst margin = {top: 10, right: 10, bottom: 2, left: 10};\nconst height = 75;\nconst maxWidth = 120;\n\nfunction Minigraphs({timeseries, date: timelineDate}) {\n  const refs = useRef([]);\n  const endDate = timelineDate || getIndiaDateYesterdayISO();\n\n  let [wrapperRef, {width}] = useMeasure();\n  width = Math.min(width, maxWidth);\n\n  const dates = useMemo(() => {\n    const pastDates = Object.keys(timeseries || {}).filter(\n      (date) => date <= endDate\n    );\n    const lastDate = pastDates[pastDates.length - 1];\n\n    const cutOffDateLower = formatISO(\n      subDays(parseIndiaDate(lastDate), MINIGRAPH_LOOKBACK_DAYS),\n      {representation: 'date'}\n    );\n    return pastDates.filter((date) => date >= cutOffDateLower);\n  }, [endDate, timeseries]);\n\n  const getMinigraphStatistic = useCallback(\n    (date, statistic) => {\n      return getStatistic(timeseries?.[date], 'delta', statistic);\n    },\n    [timeseries]\n  );\n\n  useEffect(() => {\n    if (!width) return;\n\n    const T = dates.length;\n\n    const chartRight = width - margin.right;\n    const chartBottom = height - margin.bottom;\n\n    const xScale = scaleTime()\n      .clamp(true)\n      .domain([\n        parseIndiaDate(dates[0] || endDate),\n        parseIndiaDate(dates[T - 1]) || endDate,\n      ])\n      .range([margin.left, chartRight]);\n\n    refs.current.forEach((ref, index) => {\n      const svg = select(ref);\n      const statistic = LEVEL_STATISTICS[index];\n      const color = STATISTIC_CONFIGS[statistic].color;\n\n      const dailyMaxAbs = max(dates, (date) =>\n        Math.abs(getMinigraphStatistic(date, statistic))\n      );\n\n      const yScale = scaleLinear()\n        .clamp(true)\n        .domain([-dailyMaxAbs, dailyMaxAbs])\n        .range([chartBottom, margin.top]);\n\n      const linePath = line()\n        .curve(curveMonotoneX)\n        .x((date) => xScale(parseIndiaDate(date)))\n        .y((date) => yScale(getMinigraphStatistic(date, statistic)));\n\n      let pathLength;\n      svg\n        .selectAll('path')\n        .data(T ? [dates] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('path')\n              .attr('fill', 'none')\n              .attr('stroke', color + '99')\n              .attr('stroke-width', 2.5)\n              .attr('d', linePath)\n              .attr('stroke-dasharray', function () {\n                return (pathLength = this.getTotalLength());\n              })\n              .call((enter) =>\n                enter\n                  .attr('stroke-dashoffset', pathLength)\n                  .transition()\n                  .delay(100)\n                  .duration(2500)\n                  .attr('stroke-dashoffset', 0)\n              ),\n          (update) =>\n            update\n              .attr('stroke-dasharray', null)\n              .transition()\n              .duration(500)\n              .attrTween('d', function (date) {\n                const previous = select(this).attr('d');\n                const current = linePath(date);\n                return interpolatePath(previous, current);\n              })\n              .selection()\n        );\n\n      svg\n        .selectAll('circle')\n        .data(T ? [dates[T - 1]] : [])\n        .join(\n          (enter) =>\n            enter\n              .append('circle')\n              .attr('fill', color)\n              .attr('r', 2.5)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getMinigraphStatistic(date, statistic))\n              )\n              .style('opacity', 0)\n              .call((enter) =>\n                enter\n                  .transition()\n                  .delay(2100)\n                  .duration(500)\n                  .style('opacity', 1)\n                  .attr('cx', (date) => xScale(parseIndiaDate(date)))\n                  .attr('cy', (date) =>\n                    yScale(getMinigraphStatistic(date, statistic))\n                  )\n              ),\n          (update) =>\n            update\n              .transition()\n              .duration(500)\n              .attr('cx', (date) => xScale(parseIndiaDate(date)))\n              .attr('cy', (date) =>\n                yScale(getMinigraphStatistic(date, statistic))\n              )\n              .style('opacity', 1)\n              .selection()\n        );\n    });\n  }, [endDate, dates, width, getMinigraphStatistic]);\n\n  return (\n    <div className=\"Minigraph\">\n      {LEVEL_STATISTICS.map((statistic, index) => (\n        <div\n          key={statistic}\n          className={classnames('svg-parent')}\n          ref={index === 0 ? wrapperRef : null}\n          style={{width: `calc(${100 / LEVEL_STATISTICS.length}%)`}}\n        >\n          <svg\n            ref={(el) => {\n              refs.current[index] = el;\n            }}\n            preserveAspectRatio=\"xMidYMid meet\"\n            width={width}\n            height={height}\n          />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nconst isEqual = (prevProps, currProps) => {\n  if (currProps.forceRender) {\n    return false;\n  } else if (!currProps.timeseries && prevProps.timeseries) {\n    return true;\n  } else if (currProps.timeseries && !prevProps.timeseries) {\n    return false;\n  } else if (!equal(currProps.stateCode, prevProps.stateCode)) {\n    return false;\n  } else if (!equal(currProps.date, prevProps.date)) {\n    return false;\n  }\n  return true;\n};\n\nexport default memo(Minigraphs, isEqual);\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n"],"sourceRoot":""}