{"version":3,"sources":["../node_modules/react-use/esm/useIsomorphicLayoutEffect.js","../node_modules/react-use/esm/useMeasure.js","../node_modules/d3-interpolate-path/build/d3-interpolate-path.mjs","../node_modules/d3-selection/src/sourceEvent.js","../node_modules/d3-axis/src/identity.js","../node_modules/d3-axis/src/axis.js","../node_modules/d3-selection/src/pointer.js","../node_modules/d3-shape/src/area.js"],"names":["useIsomorphicLayoutEffect","isBrowser","useLayoutEffect","useEffect","defaultState","x","y","width","height","top","left","bottom","right","window","ResizeObserver","_a","useState","element","ref","_b","rect","setRect","observer","useMemo","entries","contentRect","top_1","observe","disconnect","noop","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_defineProperty","obj","key","value","defineProperty","configurable","writable","_extends","assign","target","i","arguments","length","source","prototype","hasOwnProperty","call","this","_arrayLikeToArray","arr","len","arr2","Array","_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","isArray","minLen","n","toString","slice","constructor","name","from","test","_unsupportedIterableToArray","F","s","done","e","f","TypeError","err","normalCompletion","didErr","step","next","return","decasteljau","points","t","decasteljauRecurse","newPoints","reverse","pointsToCommand","command","x2","y2","x1","y1","type","splitCurve","commandStart","commandEnd","segmentCount","segments","remainingCurve","tIncrement","split","splitCurveAsPoints","map","commandTokenRegex","typeMap","M","L","H","V","C","S","Q","T","A","Z","arrayOfLength","array","commandToString","concat","p","join","extend","commandsToExtend","referenceCommands","excludeSegment","numSegmentsToExtend","numReferenceSegments","segmentRatio","extended","reduce","accum","d","insertIndex","Math","floor","addToPriorSegment","lastCommandCopies","forEach","copyCommand","splitSegment","unshift","pathCommandsFromString","commandArgs","tokens","match","commands","a","interpolatePathCommands","aCommandsInput","bCommandsInput","aCommands","bCommands","addZ","pop","abs","interpolatedCommands","aCommand","bCommand","conversionMap","readFromBKeys","toUpperCase","aConverted","bKey","bValue","aValue","undefined","includes","convertToSameType","getOwnPropertyDescriptors","defineProperties","_objectSpread2","_step","interpolatedCommand","_iterator","arg","round","interpolatePath","b","commandInterpolator","_step2","interpolatedString","_iterator2","toLowerCase","event","sourceEvent","epsilon","translateX","translateY","number","scale","center","offset","max","bandwidth","entering","__axis","axis","orient","tickArguments","tickValues","tickFormat","tickSizeInner","tickSizeOuter","tickPadding","devicePixelRatio","k","transform","context","values","ticks","domain","format","identity","spacing","range","range0","range1","position","copy","selection","path","selectAll","data","tick","order","tickExit","exit","tickEnter","enter","append","attr","line","select","text","merge","insert","transition","isFinite","getAttribute","parentNode","remove","each","_","tickSize","axisRight","axisBottom","node","currentTarget","svg","ownerSVGElement","createSVGPoint","point","clientX","clientY","matrixTransform","getScreenCTM","inverse","getBoundingClientRect","clientLeft","clientTop","pageX","pageY","x0","y0","defined","constant","curve","curveLinear","output","area","j","buffer","defined0","x0z","y0z","areaStart","lineStart","lineEnd","areaEnd","arealine","pointX","pointY","lineX0","lineY0","lineY1","lineX1"],"mappings":"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","file":"static/js/5.e53db121.chunk.js","sourcesContent":["import { useEffect, useLayoutEffect } from 'react';\nimport { isBrowser } from './misc/util';\nvar useIsomorphicLayoutEffect = isBrowser ? useLayoutEffect : useEffect;\nexport default useIsomorphicLayoutEffect;\n","import { useMemo, useState } from 'react';\nimport useIsomorphicLayoutEffect from './useIsomorphicLayoutEffect';\nimport { isBrowser, noop } from './misc/util';\nvar defaultState = {\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0,\n    top: 0,\n    left: 0,\n    bottom: 0,\n    right: 0,\n};\nfunction useMeasure() {\n    var _a = useState(null), element = _a[0], ref = _a[1];\n    var _b = useState(defaultState), rect = _b[0], setRect = _b[1];\n    var observer = useMemo(function () {\n        return new window.ResizeObserver(function (entries) {\n            if (entries[0]) {\n                var _a = entries[0].contentRect, x = _a.x, y = _a.y, width = _a.width, height = _a.height, top_1 = _a.top, left = _a.left, bottom = _a.bottom, right = _a.right;\n                setRect({ x: x, y: y, width: width, height: height, top: top_1, left: left, bottom: bottom, right: right });\n            }\n        });\n    }, []);\n    useIsomorphicLayoutEffect(function () {\n        if (!element)\n            return;\n        observer.observe(element);\n        return function () {\n            observer.disconnect();\n        };\n    }, [element]);\n    return [ref, rect];\n}\nexport default isBrowser && typeof window.ResizeObserver !== 'undefined'\n    ? useMeasure\n    : (function () { return [noop, defaultState]; });\n","function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (e) {\n          throw e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (e) {\n      didErr = true;\n      err = e;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\n/**\n * de Casteljau's algorithm for drawing and splitting bezier curves.\n * Inspired by https://pomax.github.io/bezierinfo/\n *\n * @param {Number[][]} points Array of [x,y] points: [start, control1, control2, ..., end]\n *   The original segment to split.\n * @param {Number} t Where to split the curve (value between [0, 1])\n * @return {Object} An object { left, right } where left is the segment from 0..t and\n *   right is the segment from t..1.\n */\nfunction decasteljau(points, t) {\n  var left = [];\n  var right = [];\n\n  function decasteljauRecurse(points, t) {\n    if (points.length === 1) {\n      left.push(points[0]);\n      right.push(points[0]);\n    } else {\n      var newPoints = Array(points.length - 1);\n\n      for (var i = 0; i < newPoints.length; i++) {\n        if (i === 0) {\n          left.push(points[0]);\n        }\n\n        if (i === newPoints.length - 1) {\n          right.push(points[i + 1]);\n        }\n\n        newPoints[i] = [(1 - t) * points[i][0] + t * points[i + 1][0], (1 - t) * points[i][1] + t * points[i + 1][1]];\n      }\n\n      decasteljauRecurse(newPoints, t);\n    }\n  }\n\n  if (points.length) {\n    decasteljauRecurse(points, t);\n  }\n\n  return {\n    left: left,\n    right: right.reverse()\n  };\n}\n/**\n * Convert segments represented as points back into a command object\n *\n * @param {Number[][]} points Array of [x,y] points: [start, control1, control2, ..., end]\n *   Represents a segment\n * @return {Object} A command object representing the segment.\n */\n\n\nfunction pointsToCommand(points) {\n  var command = {};\n\n  if (points.length === 4) {\n    command.x2 = points[2][0];\n    command.y2 = points[2][1];\n  }\n\n  if (points.length >= 3) {\n    command.x1 = points[1][0];\n    command.y1 = points[1][1];\n  }\n\n  command.x = points[points.length - 1][0];\n  command.y = points[points.length - 1][1];\n\n  if (points.length === 4) {\n    // start, control1, control2, end\n    command.type = 'C';\n  } else if (points.length === 3) {\n    // start, control, end\n    command.type = 'Q';\n  } else {\n    // start, end\n    command.type = 'L';\n  }\n\n  return command;\n}\n/**\n * Runs de Casteljau's algorithm enough times to produce the desired number of segments.\n *\n * @param {Number[][]} points Array of [x,y] points for de Casteljau (the initial segment to split)\n * @param {Number} segmentCount Number of segments to split the original into\n * @return {Number[][][]} Array of segments\n */\n\n\nfunction splitCurveAsPoints(points, segmentCount) {\n  segmentCount = segmentCount || 2;\n  var segments = [];\n  var remainingCurve = points;\n  var tIncrement = 1 / segmentCount; // x-----x-----x-----x\n  // t=  0.33   0.66   1\n  // x-----o-----------x\n  // r=  0.33\n  //       x-----o-----x\n  // r=         0.5  (0.33 / (1 - 0.33))  === tIncrement / (1 - (tIncrement * (i - 1))\n  // x-----x-----x-----x----x\n  // t=  0.25   0.5   0.75  1\n  // x-----o----------------x\n  // r=  0.25\n  //       x-----o----------x\n  // r=         0.33  (0.25 / (1 - 0.25))\n  //             x-----o----x\n  // r=         0.5  (0.25 / (1 - 0.5))\n\n  for (var i = 0; i < segmentCount - 1; i++) {\n    var tRelative = tIncrement / (1 - tIncrement * i);\n    var split = decasteljau(remainingCurve, tRelative);\n    segments.push(split.left);\n    remainingCurve = split.right;\n  } // last segment is just to the end from the last point\n\n\n  segments.push(remainingCurve);\n  return segments;\n}\n/**\n * Convert command objects to arrays of points, run de Casteljau's algorithm on it\n * to split into to the desired number of segments.\n *\n * @param {Object} commandStart The start command object\n * @param {Object} commandEnd The end command object\n * @param {Number} segmentCount The number of segments to create\n * @return {Object[]} An array of commands representing the segments in sequence\n */\n\n\nfunction splitCurve(commandStart, commandEnd, segmentCount) {\n  var points = [[commandStart.x, commandStart.y]];\n\n  if (commandEnd.x1 != null) {\n    points.push([commandEnd.x1, commandEnd.y1]);\n  }\n\n  if (commandEnd.x2 != null) {\n    points.push([commandEnd.x2, commandEnd.y2]);\n  }\n\n  points.push([commandEnd.x, commandEnd.y]);\n  return splitCurveAsPoints(points, segmentCount).map(pointsToCommand);\n}\n\nvar commandTokenRegex = /[MLCSTQAHVZmlcstqahv]|-?[\\d.e+-]+/g;\n/**\n * List of params for each command type in a path `d` attribute\n */\n\nvar typeMap = {\n  M: ['x', 'y'],\n  L: ['x', 'y'],\n  H: ['x'],\n  V: ['y'],\n  C: ['x1', 'y1', 'x2', 'y2', 'x', 'y'],\n  S: ['x2', 'y2', 'x', 'y'],\n  Q: ['x1', 'y1', 'x', 'y'],\n  T: ['x', 'y'],\n  A: ['rx', 'ry', 'xAxisRotation', 'largeArcFlag', 'sweepFlag', 'x', 'y'],\n  Z: []\n}; // Add lower case entries too matching uppercase (e.g. 'm' == 'M')\n\nObject.keys(typeMap).forEach(function (key) {\n  typeMap[key.toLowerCase()] = typeMap[key];\n});\n\nfunction arrayOfLength(length, value) {\n  var array = Array(length);\n\n  for (var i = 0; i < length; i++) {\n    array[i] = value;\n  }\n\n  return array;\n}\n/**\n * Converts a command object to a string to be used in a `d` attribute\n * @param {Object} command A command object\n * @return {String} The string for the `d` attribute\n */\n\n\nfunction commandToString(command) {\n  return \"\".concat(command.type).concat(typeMap[command.type].map(function (p) {\n    return command[p];\n  }).join(','));\n}\n/**\n * Converts command A to have the same type as command B.\n *\n * e.g., L0,5 -> C0,5,0,5,0,5\n *\n * Uses these rules:\n * x1 <- x\n * x2 <- x\n * y1 <- y\n * y2 <- y\n * rx <- 0\n * ry <- 0\n * xAxisRotation <- read from B\n * largeArcFlag <- read from B\n * sweepflag <- read from B\n *\n * @param {Object} aCommand Command object from path `d` attribute\n * @param {Object} bCommand Command object from path `d` attribute to match against\n * @return {Object} aCommand converted to type of bCommand\n */\n\n\nfunction convertToSameType(aCommand, bCommand) {\n  var conversionMap = {\n    x1: 'x',\n    y1: 'y',\n    x2: 'x',\n    y2: 'y'\n  };\n  var readFromBKeys = ['xAxisRotation', 'largeArcFlag', 'sweepFlag']; // convert (but ignore M types)\n\n  if (aCommand.type !== bCommand.type && bCommand.type.toUpperCase() !== 'M') {\n    var aConverted = {};\n    Object.keys(bCommand).forEach(function (bKey) {\n      var bValue = bCommand[bKey]; // first read from the A command\n\n      var aValue = aCommand[bKey]; // if it is one of these values, read from B no matter what\n\n      if (aValue === undefined) {\n        if (readFromBKeys.includes(bKey)) {\n          aValue = bValue;\n        } else {\n          // if it wasn't in the A command, see if an equivalent was\n          if (aValue === undefined && conversionMap[bKey]) {\n            aValue = aCommand[conversionMap[bKey]];\n          } // if it doesn't have a converted value, use 0\n\n\n          if (aValue === undefined) {\n            aValue = 0;\n          }\n        }\n      }\n\n      aConverted[bKey] = aValue;\n    }); // update the type to match B\n\n    aConverted.type = bCommand.type;\n    aCommand = aConverted;\n  }\n\n  return aCommand;\n}\n/**\n * Interpolate between command objects commandStart and commandEnd segmentCount times.\n * If the types are L, Q, or C then the curves are split as per de Casteljau's algorithm.\n * Otherwise we just copy commandStart segmentCount - 1 times, finally ending with commandEnd.\n *\n * @param {Object} commandStart Command object at the beginning of the segment\n * @param {Object} commandEnd Command object at the end of the segment\n * @param {Number} segmentCount The number of segments to split this into. If only 1\n *   Then [commandEnd] is returned.\n * @return {Object[]} Array of ~segmentCount command objects between commandStart and\n *   commandEnd. (Can be segmentCount+1 objects if commandStart is type M).\n */\n\n\nfunction splitSegment(commandStart, commandEnd, segmentCount) {\n  var segments = []; // line, quadratic bezier, or cubic bezier\n\n  if (commandEnd.type === 'L' || commandEnd.type === 'Q' || commandEnd.type === 'C') {\n    segments = segments.concat(splitCurve(commandStart, commandEnd, segmentCount)); // general case - just copy the same point\n  } else {\n    var copyCommand = _extends({}, commandStart); // convert M to L\n\n\n    if (copyCommand.type === 'M') {\n      copyCommand.type = 'L';\n    }\n\n    segments = segments.concat(arrayOfLength(segmentCount - 1).map(function () {\n      return copyCommand;\n    }));\n    segments.push(commandEnd);\n  }\n\n  return segments;\n}\n/**\n * Extends an array of commandsToExtend to the length of the referenceCommands by\n * splitting segments until the number of commands match. Ensures all the actual\n * points of commandsToExtend are in the extended array.\n *\n * @param {Object[]} commandsToExtend The command object array to extend\n * @param {Object[]} referenceCommands The command object array to match in length\n * @param {Function} excludeSegment a function that takes a start command object and\n *   end command object and returns true if the segment should be excluded from splitting.\n * @return {Object[]} The extended commandsToExtend array\n */\n\n\nfunction extend(commandsToExtend, referenceCommands, excludeSegment) {\n  // compute insertion points:\n  // number of segments in the path to extend\n  var numSegmentsToExtend = commandsToExtend.length - 1; // number of segments in the reference path.\n\n  var numReferenceSegments = referenceCommands.length - 1; // this value is always between [0, 1].\n\n  var segmentRatio = numSegmentsToExtend / numReferenceSegments; // create a map, mapping segments in referenceCommands to how many points\n  // should be added in that segment (should always be >= 1 since we need each\n  // point itself).\n  // 0 = segment 0-1, 1 = segment 1-2, n-1 = last vertex\n\n  var countPointsPerSegment = arrayOfLength(numReferenceSegments).reduce(function (accum, d, i) {\n    var insertIndex = Math.floor(segmentRatio * i); // handle excluding segments\n\n    if (excludeSegment && insertIndex < commandsToExtend.length - 1 && excludeSegment(commandsToExtend[insertIndex], commandsToExtend[insertIndex + 1])) {\n      // set the insertIndex to the segment that this point should be added to:\n      // round the insertIndex essentially so we split half and half on\n      // neighbouring segments. hence the segmentRatio * i < 0.5\n      var addToPriorSegment = segmentRatio * i % 1 < 0.5; // only skip segment if we already have 1 point in it (can't entirely remove a segment)\n\n      if (accum[insertIndex]) {\n        // TODO - Note this is a naive algorithm that should work for most d3-area use cases\n        // but if two adjacent segments are supposed to be skipped, this will not perform as\n        // expected. Could be updated to search for nearest segment to place the point in, but\n        // will only do that if necessary.\n        // add to the prior segment\n        if (addToPriorSegment) {\n          if (insertIndex > 0) {\n            insertIndex -= 1; // not possible to add to previous so adding to next\n          } else if (insertIndex < commandsToExtend.length - 1) {\n            insertIndex += 1;\n          } // add to next segment\n\n        } else if (insertIndex < commandsToExtend.length - 1) {\n          insertIndex += 1; // not possible to add to next so adding to previous\n        } else if (insertIndex > 0) {\n          insertIndex -= 1;\n        }\n      }\n    }\n\n    accum[insertIndex] = (accum[insertIndex] || 0) + 1;\n    return accum;\n  }, []); // extend each segment to have the correct number of points for a smooth interpolation\n\n  var extended = countPointsPerSegment.reduce(function (extended, segmentCount, i) {\n    // if last command, just add `segmentCount` number of times\n    if (i === commandsToExtend.length - 1) {\n      var lastCommandCopies = arrayOfLength(segmentCount, _extends({}, commandsToExtend[commandsToExtend.length - 1])); // convert M to L\n\n      if (lastCommandCopies[0].type === 'M') {\n        lastCommandCopies.forEach(function (d) {\n          d.type = 'L';\n        });\n      }\n\n      return extended.concat(lastCommandCopies);\n    } // otherwise, split the segment segmentCount times.\n\n\n    return extended.concat(splitSegment(commandsToExtend[i], commandsToExtend[i + 1], segmentCount));\n  }, []); // add in the very first point since splitSegment only adds in the ones after it\n\n  extended.unshift(commandsToExtend[0]);\n  return extended;\n}\n/**\n * Takes a path `d` string and converts it into an array of command\n * objects. Drops the `Z` character.\n *\n * @param {String|null} d A path `d` string\n */\n\n\nfunction pathCommandsFromString(d) {\n  // split into valid tokens\n  var tokens = (d || '').match(commandTokenRegex) || [];\n  var commands = [];\n  var commandArgs;\n  var command; // iterate over each token, checking if we are at a new command\n  // by presence in the typeMap\n\n  for (var i = 0; i < tokens.length; ++i) {\n    commandArgs = typeMap[tokens[i]]; // new command found:\n\n    if (commandArgs) {\n      command = {\n        type: tokens[i]\n      }; // add each of the expected args for this command:\n\n      for (var a = 0; a < commandArgs.length; ++a) {\n        command[commandArgs[a]] = +tokens[i + a + 1];\n      } // need to increment our token index appropriately since\n      // we consumed token args\n\n\n      i += commandArgs.length;\n      commands.push(command);\n    }\n  }\n\n  return commands;\n}\n/**\n * Interpolate from A to B by extending A and B during interpolation to have\n * the same number of points. This allows for a smooth transition when they\n * have a different number of points.\n *\n * Ignores the `Z` command in paths unless both A and B end with it.\n *\n * This function works directly with arrays of command objects instead of with\n * path `d` strings (see interpolatePath for working with `d` strings).\n *\n * @param {Object[]} aCommandsInput Array of path commands\n * @param {Object[]} bCommandsInput Array of path commands\n * @param {Function} excludeSegment a function that takes a start command object and\n *   end command object and returns true if the segment should be excluded from splitting.\n * @returns {Function} Interpolation function that maps t ([0, 1]) to an array of path commands.\n */\n\nfunction interpolatePathCommands(aCommandsInput, bCommandsInput, excludeSegment) {\n  // make a copy so we don't mess with the input arrays\n  var aCommands = aCommandsInput == null ? [] : aCommandsInput.slice();\n  var bCommands = bCommandsInput == null ? [] : bCommandsInput.slice(); // both input sets are empty, so we don't interpolate\n\n  if (!aCommands.length && !bCommands.length) {\n    return function nullInterpolator() {\n      return [];\n    };\n  } // do we add Z during interpolation? yes if both have it. (we'd expect both to have it or not)\n\n\n  var addZ = (aCommands.length === 0 || aCommands[aCommands.length - 1].type === 'Z') && (bCommands.length === 0 || bCommands[bCommands.length - 1].type === 'Z'); // we temporarily remove Z\n\n  if (aCommands.length > 0 && aCommands[aCommands.length - 1].type === 'Z') {\n    aCommands.pop();\n  }\n\n  if (bCommands.length > 0 && bCommands[bCommands.length - 1].type === 'Z') {\n    bCommands.pop();\n  } // if A is empty, treat it as if it used to contain just the first point\n  // of B. This makes it so the line extends out of from that first point.\n\n\n  if (!aCommands.length) {\n    aCommands.push(bCommands[0]); // otherwise if B is empty, treat it as if it contains the first point\n    // of A. This makes it so the line retracts into the first point.\n  } else if (!bCommands.length) {\n    bCommands.push(aCommands[0]);\n  } // extend to match equal size\n\n\n  var numPointsToExtend = Math.abs(bCommands.length - aCommands.length);\n\n  if (numPointsToExtend !== 0) {\n    // B has more points than A, so add points to A before interpolating\n    if (bCommands.length > aCommands.length) {\n      aCommands = extend(aCommands, bCommands, excludeSegment); // else if A has more points than B, add more points to B\n    } else if (bCommands.length < aCommands.length) {\n      bCommands = extend(bCommands, aCommands, excludeSegment);\n    }\n  } // commands have same length now.\n  // convert commands in A to the same type as those in B\n\n\n  aCommands = aCommands.map(function (aCommand, i) {\n    return convertToSameType(aCommand, bCommands[i]);\n  }); // create mutable interpolated command objects\n\n  var interpolatedCommands = aCommands.map(function (aCommand) {\n    return _objectSpread2({}, aCommand);\n  });\n\n  if (addZ) {\n    interpolatedCommands.push({\n      type: 'Z'\n    });\n    aCommands.push({\n      type: 'Z'\n    }); // required for when returning at t == 0\n  }\n\n  return function pathCommandInterpolator(t) {\n    // at 1 return the final value without the extensions used during interpolation\n    if (t === 1) {\n      return bCommandsInput == null ? [] : bCommandsInput;\n    } // work with aCommands directly since interpolatedCommands are mutated\n\n\n    if (t === 0) {\n      return aCommands;\n    } // interpolate the commands using the mutable interpolated command objs\n\n\n    for (var i = 0; i < interpolatedCommands.length; ++i) {\n      // if (interpolatedCommands[i].type === 'Z') continue;\n      var aCommand = aCommands[i];\n      var bCommand = bCommands[i];\n      var interpolatedCommand = interpolatedCommands[i];\n\n      var _iterator = _createForOfIteratorHelper(typeMap[interpolatedCommand.type]),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var arg = _step.value;\n          interpolatedCommand[arg] = (1 - t) * aCommand[arg] + t * bCommand[arg]; // do not use floats for flags (#27), round to integer\n\n          if (arg === 'largeArcFlag' || arg === 'sweepFlag') {\n            interpolatedCommand[arg] = Math.round(interpolatedCommand[arg]);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n\n    return interpolatedCommands;\n  };\n}\n/**\n * Interpolate from A to B by extending A and B during interpolation to have\n * the same number of points. This allows for a smooth transition when they\n * have a different number of points.\n *\n * Ignores the `Z` character in paths unless both A and B end with it.\n *\n * @param {String} a The `d` attribute for a path\n * @param {String} b The `d` attribute for a path\n * @param {Function} excludeSegment a function that takes a start command object and\n *   end command object and returns true if the segment should be excluded from splitting.\n * @returns {Function} Interpolation function that maps t ([0, 1]) to a path `d` string.\n */\n\nfunction interpolatePath(a, b, excludeSegment) {\n  var aCommands = pathCommandsFromString(a);\n  var bCommands = pathCommandsFromString(b);\n\n  if (!aCommands.length && !bCommands.length) {\n    return function nullInterpolator() {\n      return '';\n    };\n  }\n\n  var commandInterpolator = interpolatePathCommands(aCommands, bCommands, excludeSegment);\n  return function pathStringInterpolator(t) {\n    // at 1 return the final value without the extensions used during interpolation\n    if (t === 1) {\n      return b == null ? '' : b;\n    }\n\n    var interpolatedCommands = commandInterpolator(t); // convert to a string (fastest concat: https://jsperf.com/join-concat/150)\n\n    var interpolatedString = '';\n\n    var _iterator2 = _createForOfIteratorHelper(interpolatedCommands),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var interpolatedCommand = _step2.value;\n        interpolatedString += commandToString(interpolatedCommand);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return interpolatedString;\n  };\n}\n\nexport { interpolatePath, interpolatePathCommands, pathCommandsFromString };\n","export default function(event) {\n  let sourceEvent;\n  while (sourceEvent = event.sourceEvent) event = sourceEvent;\n  return event;\n}\n","export default function(x) {\n  return x;\n}\n","import identity from \"./identity.js\";\n\nvar top = 1,\n    right = 2,\n    bottom = 3,\n    left = 4,\n    epsilon = 1e-6;\n\nfunction translateX(x) {\n  return \"translate(\" + x + \",0)\";\n}\n\nfunction translateY(y) {\n  return \"translate(0,\" + y + \")\";\n}\n\nfunction number(scale) {\n  return d => +scale(d);\n}\n\nfunction center(scale, offset) {\n  offset = Math.max(0, scale.bandwidth() - offset * 2) / 2;\n  if (scale.round()) offset = Math.round(offset);\n  return d => +scale(d) + offset;\n}\n\nfunction entering() {\n  return !this.__axis;\n}\n\nfunction axis(orient, scale) {\n  var tickArguments = [],\n      tickValues = null,\n      tickFormat = null,\n      tickSizeInner = 6,\n      tickSizeOuter = 6,\n      tickPadding = 3,\n      offset = typeof window !== \"undefined\" && window.devicePixelRatio > 1 ? 0 : 0.5,\n      k = orient === top || orient === left ? -1 : 1,\n      x = orient === left || orient === right ? \"x\" : \"y\",\n      transform = orient === top || orient === bottom ? translateX : translateY;\n\n  function axis(context) {\n    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,\n        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,\n        spacing = Math.max(tickSizeInner, 0) + tickPadding,\n        range = scale.range(),\n        range0 = +range[0] + offset,\n        range1 = +range[range.length - 1] + offset,\n        position = (scale.bandwidth ? center : number)(scale.copy(), offset),\n        selection = context.selection ? context.selection() : context,\n        path = selection.selectAll(\".domain\").data([null]),\n        tick = selection.selectAll(\".tick\").data(values, scale).order(),\n        tickExit = tick.exit(),\n        tickEnter = tick.enter().append(\"g\").attr(\"class\", \"tick\"),\n        line = tick.select(\"line\"),\n        text = tick.select(\"text\");\n\n    path = path.merge(path.enter().insert(\"path\", \".tick\")\n        .attr(\"class\", \"domain\")\n        .attr(\"stroke\", \"currentColor\"));\n\n    tick = tick.merge(tickEnter);\n\n    line = line.merge(tickEnter.append(\"line\")\n        .attr(\"stroke\", \"currentColor\")\n        .attr(x + \"2\", k * tickSizeInner));\n\n    text = text.merge(tickEnter.append(\"text\")\n        .attr(\"fill\", \"currentColor\")\n        .attr(x, k * spacing)\n        .attr(\"dy\", orient === top ? \"0em\" : orient === bottom ? \"0.71em\" : \"0.32em\"));\n\n    if (context !== selection) {\n      path = path.transition(context);\n      tick = tick.transition(context);\n      line = line.transition(context);\n      text = text.transition(context);\n\n      tickExit = tickExit.transition(context)\n          .attr(\"opacity\", epsilon)\n          .attr(\"transform\", function(d) { return isFinite(d = position(d)) ? transform(d + offset) : this.getAttribute(\"transform\"); });\n\n      tickEnter\n          .attr(\"opacity\", epsilon)\n          .attr(\"transform\", function(d) { var p = this.parentNode.__axis; return transform((p && isFinite(p = p(d)) ? p : position(d)) + offset); });\n    }\n\n    tickExit.remove();\n\n    path\n        .attr(\"d\", orient === left || orient === right\n            ? (tickSizeOuter ? \"M\" + k * tickSizeOuter + \",\" + range0 + \"H\" + offset + \"V\" + range1 + \"H\" + k * tickSizeOuter : \"M\" + offset + \",\" + range0 + \"V\" + range1)\n            : (tickSizeOuter ? \"M\" + range0 + \",\" + k * tickSizeOuter + \"V\" + offset + \"H\" + range1 + \"V\" + k * tickSizeOuter : \"M\" + range0 + \",\" + offset + \"H\" + range1));\n\n    tick\n        .attr(\"opacity\", 1)\n        .attr(\"transform\", function(d) { return transform(position(d) + offset); });\n\n    line\n        .attr(x + \"2\", k * tickSizeInner);\n\n    text\n        .attr(x, k * spacing)\n        .text(format);\n\n    selection.filter(entering)\n        .attr(\"fill\", \"none\")\n        .attr(\"font-size\", 10)\n        .attr(\"font-family\", \"sans-serif\")\n        .attr(\"text-anchor\", orient === right ? \"start\" : orient === left ? \"end\" : \"middle\");\n\n    selection\n        .each(function() { this.__axis = position; });\n  }\n\n  axis.scale = function(_) {\n    return arguments.length ? (scale = _, axis) : scale;\n  };\n\n  axis.ticks = function() {\n    return tickArguments = Array.from(arguments), axis;\n  };\n\n  axis.tickArguments = function(_) {\n    return arguments.length ? (tickArguments = _ == null ? [] : Array.from(_), axis) : tickArguments.slice();\n  };\n\n  axis.tickValues = function(_) {\n    return arguments.length ? (tickValues = _ == null ? null : Array.from(_), axis) : tickValues && tickValues.slice();\n  };\n\n  axis.tickFormat = function(_) {\n    return arguments.length ? (tickFormat = _, axis) : tickFormat;\n  };\n\n  axis.tickSize = function(_) {\n    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeInner = function(_) {\n    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;\n  };\n\n  axis.tickSizeOuter = function(_) {\n    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;\n  };\n\n  axis.tickPadding = function(_) {\n    return arguments.length ? (tickPadding = +_, axis) : tickPadding;\n  };\n\n  axis.offset = function(_) {\n    return arguments.length ? (offset = +_, axis) : offset;\n  };\n\n  return axis;\n}\n\nexport function axisTop(scale) {\n  return axis(top, scale);\n}\n\nexport function axisRight(scale) {\n  return axis(right, scale);\n}\n\nexport function axisBottom(scale) {\n  return axis(bottom, scale);\n}\n\nexport function axisLeft(scale) {\n  return axis(left, scale);\n}\n","import sourceEvent from \"./sourceEvent.js\";\n\nexport default function(event, node) {\n  event = sourceEvent(event);\n  if (node === undefined) node = event.currentTarget;\n  if (node) {\n    var svg = node.ownerSVGElement || node;\n    if (svg.createSVGPoint) {\n      var point = svg.createSVGPoint();\n      point.x = event.clientX, point.y = event.clientY;\n      point = point.matrixTransform(node.getScreenCTM().inverse());\n      return [point.x, point.y];\n    }\n    if (node.getBoundingClientRect) {\n      var rect = node.getBoundingClientRect();\n      return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];\n    }\n  }\n  return [event.pageX, event.pageY];\n}\n","import {path} from \"d3-path\";\nimport array from \"./array.js\";\nimport constant from \"./constant.js\";\nimport curveLinear from \"./curve/linear.js\";\nimport line from \"./line.js\";\nimport {x as pointX, y as pointY} from \"./point.js\";\n\nexport default function(x0, y0, y1) {\n  var x1 = null,\n      defined = constant(true),\n      context = null,\n      curve = curveLinear,\n      output = null;\n\n  x0 = typeof x0 === \"function\" ? x0 : (x0 === undefined) ? pointX : constant(+x0);\n  y0 = typeof y0 === \"function\" ? y0 : (y0 === undefined) ? constant(0) : constant(+y0);\n  y1 = typeof y1 === \"function\" ? y1 : (y1 === undefined) ? pointY : constant(+y1);\n\n  function area(data) {\n    var i,\n        j,\n        k,\n        n = (data = array(data)).length,\n        d,\n        defined0 = false,\n        buffer,\n        x0z = new Array(n),\n        y0z = new Array(n);\n\n    if (context == null) output = curve(buffer = path());\n\n    for (i = 0; i <= n; ++i) {\n      if (!(i < n && defined(d = data[i], i, data)) === defined0) {\n        if (defined0 = !defined0) {\n          j = i;\n          output.areaStart();\n          output.lineStart();\n        } else {\n          output.lineEnd();\n          output.lineStart();\n          for (k = i - 1; k >= j; --k) {\n            output.point(x0z[k], y0z[k]);\n          }\n          output.lineEnd();\n          output.areaEnd();\n        }\n      }\n      if (defined0) {\n        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);\n        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);\n      }\n    }\n\n    if (buffer) return output = null, buffer + \"\" || null;\n  }\n\n  function arealine() {\n    return line().defined(defined).curve(curve).context(context);\n  }\n\n  area.x = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), x1 = null, area) : x0;\n  };\n\n  area.x0 = function(_) {\n    return arguments.length ? (x0 = typeof _ === \"function\" ? _ : constant(+_), area) : x0;\n  };\n\n  area.x1 = function(_) {\n    return arguments.length ? (x1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : x1;\n  };\n\n  area.y = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), y1 = null, area) : y0;\n  };\n\n  area.y0 = function(_) {\n    return arguments.length ? (y0 = typeof _ === \"function\" ? _ : constant(+_), area) : y0;\n  };\n\n  area.y1 = function(_) {\n    return arguments.length ? (y1 = _ == null ? null : typeof _ === \"function\" ? _ : constant(+_), area) : y1;\n  };\n\n  area.lineX0 =\n  area.lineY0 = function() {\n    return arealine().x(x0).y(y0);\n  };\n\n  area.lineY1 = function() {\n    return arealine().x(x0).y(y1);\n  };\n\n  area.lineX1 = function() {\n    return arealine().x(x1).y(y0);\n  };\n\n  area.defined = function(_) {\n    return arguments.length ? (defined = typeof _ === \"function\" ? _ : constant(!!_), area) : defined;\n  };\n\n  area.curve = function(_) {\n    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;\n  };\n\n  area.context = function(_) {\n    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;\n  };\n\n  return area;\n}\n"],"sourceRoot":""}