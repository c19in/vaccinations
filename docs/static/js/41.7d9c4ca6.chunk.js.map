{"version":3,"sources":["components/State.js"],"names":["DeltaBarGraph","lazy","retry","Footer","Level","VaccinationHeader","MapExplorer","MapSwitcher","Minigraphs","StateHeader","TimeseriesExplorer","State","t","useTranslation","stateCode","useParams","toUpperCase","useSessionStorage","mapStatistic","setMapStatistic","useState","showAllDistricts","setShowAllDistricts","districtName","regionHighlighted","setRegionHighlighted","delta7Mode","setDelta7Mode","useEffect","useSWR","DATA_API_ROOT","fetcher","revalidateOnMount","refreshInterval","timeseries","data","timeseriesResponseError","error","metadata","stateData","gridRowCount","useMemo","gridColumnCount","window","innerWidth","districtCount","districts","Object","keys","filter","length","Math","ceil","trail","styles","map","element","index","push","animationDelay","lookback","lastDataDate","updatedDates","meta","date","tested","vaccinated","formatISO","max","parseIndiaDate","representation","primaryStatistic","MAP_STATISTICS","includes","noDistrictData","UNKNOWN_DISTRICT_KEY","PRIMARY_STATISTICS","every","statistic","getStatistic","statisticConfig","STATISTIC_CONFIGS","noRegionHighlightedDistrictData","hasPrimary","STATE_NAMES","name","content","className","style","position","dates","forceRender","total","vaccinated1","fallback","minHeight","classnames","expanded","gridTemplateRows","sort","a","b","districtNameA","districtNameB","districtA","districtB","handleSort","slice","undefined","delta","formatNumber","onClick","height","flexBasis","memo"],"mappings":"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","file":"static/js/41.7d9c4ca6.chunk.js","sourcesContent":["import {\n  DATA_API_ROOT,\n  MAP_STATISTICS,\n  PRIMARY_STATISTICS,\n  STATE_NAMES,\n  STATISTIC_CONFIGS,\n  UNKNOWN_DISTRICT_KEY,\n} from '../constants';\n// import useIsVisible from '../hooks/useIsVisible';\nimport {\n  fetcher,\n  formatNumber,\n  getStatistic,\n  parseIndiaDate,\n  retry,\n} from '../utils/commonFunctions';\n\nimport {SmileyIcon} from '@primer/octicons-react';\nimport classnames from 'classnames';\nimport {formatISO, max} from 'date-fns';\nimport {\n  memo,\n  useMemo,\n  useState,\n  useEffect,\n  lazy,\n  Suspense,\n  // useRef,\n} from 'react';\nimport {Helmet} from 'react-helmet';\nimport {useTranslation} from 'react-i18next';\nimport {useParams} from 'react-router-dom';\nimport {useSessionStorage} from 'react-use';\nimport useSWR from 'swr';\n\nconst DeltaBarGraph = lazy(() => retry(() => import('./DeltaBarGraph')));\nconst Footer = lazy(() => retry(() => import('./Footer')));\nconst Level = lazy(() => retry(() => import('./Level')));\nconst VaccinationHeader = lazy(() =>\n  retry(() => import('./VaccinationHeader'))\n);\nconst MapExplorer = lazy(() => retry(() => import('./MapExplorer')));\nconst MapSwitcher = lazy(() => retry(() => import('./MapSwitcher')));\nconst Minigraphs = lazy(() => retry(() => import('./Minigraphs')));\nconst StateHeader = lazy(() => retry(() => import('./StateHeader')));\n// const StateMeta = lazy(() => retry(() => import('./StateMeta')));\nconst TimeseriesExplorer = lazy(() =>\n  retry(() => import('./TimeseriesExplorer'))\n);\n\nfunction State() {\n  const {t} = useTranslation();\n\n  const stateCode = useParams().stateCode.toUpperCase();\n\n  const [mapStatistic, setMapStatistic] = useSessionStorage(\n    'mapStatistic',\n    'active'\n  );\n  const [showAllDistricts, setShowAllDistricts] = useState(false);\n  const [regionHighlighted, setRegionHighlighted] = useState({\n    stateCode: stateCode,\n    districtName: null,\n  });\n  const [delta7Mode, setDelta7Mode] = useState(false);\n\n  useEffect(() => {\n    if (regionHighlighted.stateCode !== stateCode) {\n      setRegionHighlighted({\n        stateCode: stateCode,\n        districtName: null,\n      });\n      setShowAllDistricts(false);\n    }\n  }, [regionHighlighted.stateCode, stateCode]);\n\n  const {data: timeseries, error: timeseriesResponseError} = useSWR(\n    `${DATA_API_ROOT}/timeseries-${stateCode}.min.json`,\n    fetcher,\n    {\n      revalidateOnMount: true,\n      refreshInterval: 100000,\n    }\n  );\n\n  const {data} = useSWR(`${DATA_API_ROOT}/data.min.json`, fetcher, {\n    revalidateOnMount: true,\n    refreshInterval: 100000,\n  });\n\n  const metadata = data;\n  const stateData = data?.[stateCode];\n\n  // console.log(metadata);\n\n  const toggleShowAllDistricts = () => {\n    setShowAllDistricts(!showAllDistricts);\n  };\n\n  const handleSort = (districtNameA, districtNameB) => {\n    const districtA = stateData.districts[districtNameA];\n    const districtB = stateData.districts[districtNameB];\n    return (\n      getStatistic(districtB, 'total', mapStatistic) -\n      getStatistic(districtA, 'total', mapStatistic)\n    );\n  };\n\n  const gridRowCount = useMemo(() => {\n    if (!stateData) return;\n    const gridColumnCount = window.innerWidth >= 540 ? 3 : 2;\n    const districtCount = stateData?.districts\n      ? Object.keys(stateData.districts).filter(\n          (districtName) => districtName !== 'Unknown'\n        ).length\n      : 0;\n    const gridRowCount = Math.ceil(districtCount / gridColumnCount);\n    return gridRowCount;\n  }, [stateData]);\n\n  // const stateMetaElement = useRef();\n  // const isStateMetaVisible = useIsVisible(stateMetaElement);\n\n  const trail = useMemo(() => {\n    const styles = [];\n\n    [0, 0, 0, 0].map((element, index) => {\n      styles.push({\n        animationDelay: `${index * 250}ms`,\n      });\n      return null;\n    });\n    return styles;\n  }, []);\n\n  const lookback = showAllDistricts ? (window.innerWidth >= 540 ? 10 : 8) : 6;\n\n  const lastDataDate = useMemo(() => {\n    const updatedDates = [\n      stateData?.meta?.date,\n      stateData?.meta?.tested?.date,\n      stateData?.meta?.vaccinated?.date,\n    ].filter((date) => date);\n    return updatedDates.length > 0\n      ? formatISO(max(updatedDates.map((date) => parseIndiaDate(date))), {\n          representation: 'date',\n        })\n      : null;\n  }, [stateData]);\n\n  const primaryStatistic = MAP_STATISTICS.includes(mapStatistic)\n    ? mapStatistic\n    : 'confirmed';\n\n  const noDistrictData = useMemo(() => {\n    // Heuristic: All cases are in Unknown\n    return !!(\n      stateData?.districts &&\n      stateData.districts?.[UNKNOWN_DISTRICT_KEY] &&\n      PRIMARY_STATISTICS.every(\n        (statistic) =>\n          getStatistic(stateData, 'total', statistic) ===\n          getStatistic(\n            stateData.districts[UNKNOWN_DISTRICT_KEY],\n            'total',\n            statistic\n          )\n      )\n    );\n  }, [stateData]);\n\n  const statisticConfig = STATISTIC_CONFIGS[primaryStatistic];\n\n  const noRegionHighlightedDistrictData =\n    regionHighlighted?.districtName &&\n    regionHighlighted.districtName !== UNKNOWN_DISTRICT_KEY &&\n    noDistrictData;\n\n  const districts = Object.keys(\n    ((!noDistrictData || !statisticConfig.hasPrimary) &&\n      stateData?.districts) ||\n      {}\n  );\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          Coronavirus Outbreak in {STATE_NAMES[stateCode]} - covid19india.org\n        </title>\n        <meta\n          name=\"title\"\n          content={`Coronavirus Outbreak in ${STATE_NAMES[stateCode]}: Latest Map and Case Count`}\n        />\n      </Helmet>\n\n      <div className=\"State\">\n        <div className=\"state-left\">\n          <StateHeader data={stateData} stateCode={stateCode} />\n\n          <div style={{position: 'relative'}}>\n            <MapSwitcher {...{mapStatistic, setMapStatistic}} />\n            <Level data={stateData} />\n            <Minigraphs\n              timeseries={timeseries?.[stateCode]?.dates}\n              {...{stateCode}}\n              forceRender={!!timeseriesResponseError}\n            />\n          </div>\n\n          {stateData?.total?.vaccinated1 && (\n            <VaccinationHeader data={stateData} />\n          )}\n\n          {data && (\n            <Suspense fallback={<div style={{minHeight: '50rem'}} />}>\n              <MapExplorer\n                {...{\n                  stateCode,\n                  data,\n                  regionHighlighted,\n                  setRegionHighlighted,\n                  mapStatistic,\n                  setMapStatistic,\n                  lastDataDate,\n                  delta7Mode,\n                  setDelta7Mode,\n                  noRegionHighlightedDistrictData,\n                  noDistrictData,\n                }}\n              ></MapExplorer>\n            </Suspense>\n          )}\n        </div>\n\n        <div className=\"state-right\">\n          <>\n            <div className=\"district-bar\">\n              <div\n                className={classnames('district-bar-top', {\n                  expanded: showAllDistricts,\n                })}\n              >\n                <div className=\"district-bar-left\">\n                  <h2\n                    className={classnames(primaryStatistic, 'fadeInUp')}\n                    style={trail[0]}\n                  >\n                    {t('Top districts')}\n                  </h2>\n                  <div\n                    className={`districts fadeInUp ${\n                      showAllDistricts ? 'is-grid' : ''\n                    }`}\n                    style={\n                      showAllDistricts\n                        ? {\n                            gridTemplateRows: `repeat(${gridRowCount}, 2rem)`,\n                            ...trail[1],\n                          }\n                        : trail[1]\n                    }\n                  >\n                    {districts\n                      .filter((districtName) => districtName !== 'Unknown')\n                      .sort((a, b) => handleSort(a, b))\n                      .slice(0, showAllDistricts ? undefined : 5)\n                      .map((districtName) => {\n                        const total = getStatistic(\n                          stateData.districts[districtName],\n                          'total',\n                          primaryStatistic\n                        );\n                        const delta = getStatistic(\n                          stateData.districts[districtName],\n                          'delta',\n                          primaryStatistic\n                        );\n                        return (\n                          <div key={districtName} className=\"district\">\n                            <h2>{formatNumber(total)}</h2>\n                            <h5>{t(districtName)}</h5>\n                            {primaryStatistic !== 'active' && (\n                              <div className=\"delta\">\n                                <h6 className={primaryStatistic}>\n                                  {delta > 0\n                                    ? '\\u2191' + formatNumber(delta)\n                                    : ''}\n                                </h6>\n                              </div>\n                            )}\n                          </div>\n                        );\n                      })}\n                  </div>\n                </div>\n\n                <div className=\"district-bar-right fadeInUp\" style={trail[2]}>\n                  {timeseries &&\n                    (primaryStatistic === 'confirmed' ||\n                      primaryStatistic === 'deceased') && (\n                      <div className=\"happy-sign\">\n                        {Object.keys(timeseries[stateCode]?.dates || {})\n                          .slice(-lookback)\n                          .every(\n                            (date) =>\n                              getStatistic(\n                                timeseries[stateCode].dates[date],\n                                'delta',\n                                primaryStatistic\n                              ) === 0\n                          ) && (\n                          <div\n                            className={`alert ${\n                              primaryStatistic === 'confirmed' ? 'is-green' : ''\n                            }`}\n                          >\n                            <SmileyIcon />\n                            <div className=\"alert-right\">\n                              No new {primaryStatistic} cases in the past five\n                              days\n                            </div>\n                          </div>\n                        )}\n                      </div>\n                    )}\n                  <DeltaBarGraph\n                    timeseries={timeseries?.[stateCode]?.dates}\n                    statistic={primaryStatistic}\n                    {...{stateCode, lookback}}\n                    forceRender={!!timeseriesResponseError}\n                  />\n                </div>\n              </div>\n\n              <div className=\"district-bar-bottom\">\n                {districts.length > 5 ? (\n                  <button\n                    className=\"button fadeInUp\"\n                    onClick={toggleShowAllDistricts}\n                    style={trail[3]}\n                  >\n                    <span>\n                      {t(showAllDistricts ? 'View less' : 'View all')}\n                    </span>\n                  </button>\n                ) : (\n                  <div style={{height: '3.75rem', flexBasis: '15%'}} />\n                )}\n              </div>\n            </div>\n\n            <Suspense fallback={<div />}>\n              <TimeseriesExplorer\n                {...{\n                  stateCode,\n                  timeseries,\n                  regionHighlighted,\n                  setRegionHighlighted,\n                  noRegionHighlightedDistrictData,\n                  metadata,\n                }}\n                forceRender={!!timeseriesResponseError}\n              />\n            </Suspense>\n          </>\n        </div>\n      </div>\n\n      <Footer />\n    </>\n  );\n}\n\nexport default memo(State);\n"],"sourceRoot":""}